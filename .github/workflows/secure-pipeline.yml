name: Secure Python App CI/CD

on:
  push:
    branches: [ main ]
  pull_request:

env:
  IMAGE_TAG: ${{ github.sha }}
  IMAGE_NAME: ${{ secrets.ACR_LOGIN_SERVER }}/secure-python-app:${{ github.sha }}

jobs:

  # SAST - Bandit
  sast_bandit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install bandit
      - run: bandit -r . -f json -o bandit_report.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.json

  # Secret Scan - Gitleaks
  secret_scan_gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --verbose --source . -f json -r gitleaks_report.json
      - uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks_report.json

  # IaC Scan - Checkov
  iac_scan_checkov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: json
      - run: mv results_json.json checkov_report.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov_report.json

  # Build and Push to Azure ACR
  build:
    runs-on: ubuntu-latest
    needs: [sast_bandit, secret_scan_gitleaks, iac_scan_checkov]
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: 00000000-0000-0000-0000-000000000000
          password: ${{ secrets.ACR_ACCESS_TOKEN }}
      - run: docker build -t $IMAGE_NAME .
      - run: docker push $IMAGE_NAME
      - run: |
          az acr repository show-tags --name $(echo ${{ secrets.ACR_LOGIN_SERVER }} | cut -d'.' -f1) \
            --repository secure-python-app --orderby time_desc --output tsv | tail -n +3 \
            | xargs -I {} az acr repository delete --name $(echo ${{ secrets.ACR_LOGIN_SERVER }} | cut -d'.' -f1) \
            --image secure-python-app:{} --yes

  # Image Scan - Trivy
  image_scan_trivy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: 'json'
          output: 'trivy_report.json'
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy_report.json

  # Deploy to AKS
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          az aks get-credentials --resource-group devsecops-rg --name secure-aks --overwrite-existing
          kubectl set image deployment/secure-python-app secure-python-app=$IMAGE_NAME
          kubectl apply -f k8s/service.yaml

  # Get App IP for ZAP
  get_app_ip:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - run: |
          az aks get-credentials --resource-group devsecops-rg --name secure-aks --overwrite-existing
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          APP_IP=$(kubectl -n default get svc secure-python-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo $APP_IP > app_ip.txt
      - uses: actions/upload-artifact@v4
        with:
          name: app-ip
          path: app_ip.txt

  # ZAP Baseline Scan
  zap_baseline_dynamic:
    runs-on: ubuntu-latest
    needs: get_app_ip
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-ip
      - run: |
          APP_IP=$(cat app_ip.txt)
          docker run --rm ictu/zap2docker-weekly zap-baseline.py -t http://$APP_IP:80 -I -x baseline_report.xml || true
      - uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: baseline_report.xml

  # Deploy to Production (manual approval)
  deploy_prod:
    runs-on: ubuntu-latest
    needs: zap_baseline_dynamic
    if: github.event_name == 'workflow_dispatch'
    steps:
      - run: echo "Deploying to production environment"
